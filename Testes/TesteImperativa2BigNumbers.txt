{ 
	var bigintA = bigint:982374982374,
	var bigintB = bigint:347823,
	var bigintC = bigint:29837,
	var intD = 4982,
	var bigfractionE = bigfrac:109238472/234,
	var negativeBigIntF = bigint:-923874,
	var negativeBigIntG = bigint:-982374,
	var negativeIntH = -12983,
	var negativeFractionI = bigfrac:-9823/777,

	proc soma ()  {
		write("bigintA + bigintB:");
		write(bigintA + bigintB);
		write("bigintA + intD:");
		write(bigintA + intD);
		write("bigintA + bigfractionE");
		write(bigintA + bigfractionE);
		write("negativeBigIntF + negativeBigIntG");
		write(negativeBigIntF + negativeBigIntG);
		write("negativeBigIntF + intD");
		write(negativeBigIntF + intD);
		write("negativeBigIntF + bigfractionE");
		write(negativeBigIntF + bigfractionE);
		write("negativeBigIntF + negativeIntH");
		write(negativeBigIntF + negativeIntH);
		write("bigintA + negativeFractionI");
		write(bigintA + negativeFractionI)
	},

	proc mul ()  {
		write("bigintA * bigintB:");
		write(bigintA * bigintB);
		write("bigintA * intD:");
		write(bigintA * intD);
		write("bigintA * bigfractionE");
		write(bigintA * bigfractionE);
		write("negativeBigIntF * negativeBigIntG");
		write(negativeBigIntF * negativeBigIntG);
		write("negativeBigIntF * intD");
		write(negativeBigIntF * intD);
		write("negativeBigIntF * bigfractionE");
		write(negativeBigIntF * bigfractionE);
		write("bigintB * negativeIntH");
		write(bigintB * negativeIntH);
		write("bigintC * negativeFractionI");
		write(bigintC * negativeFractionI)
	},

	proc div ()  {
		write("bigintA / bigintB:");
		write(bigintA / bigintB);
		write("bigintA / intD:");
		write(bigintA / intD);
		write("bigintA / bigfractionE");
		write(bigintA / bigfractionE);
		write("negativeBigIntF / negativeBigIntG");
		write(negativeBigIntF / negativeBigIntG);
		write("negativeBigIntF / intD");
		write(negativeBigIntF / intD);
		write("negativeBigIntF / bigfractionE");
		write(negativeBigIntF / bigfractionE);
		write("negativeBigIntF / negativeIntH");
		write(negativeBigIntF / negativeIntH);
		write("bigintA / negativeFractionI");
		write(bigintA / negativeFractionI)
	},

	proc sub ()  {
		write("bigintA - bigintB:");
		write(bigintA - bigintB);
		write("bigintA - intD:");
		write(bigintA - intD);
		write("bigintA - bigfractionE");
		write(bigintA - bigfractionE);
		write("negativeBigIntF - negativeBigIntG");
		write(negativeBigIntF - negativeBigIntG);
		write("negativeBigIntF - intD");
		write(negativeBigIntF - intD);
		write("negativeBigIntF - bigfractionE");
		write(negativeBigIntF - bigfractionE);
		write("negativeBigIntF - negativeIntH");
		write(negativeBigIntF - negativeIntH);
		write("bigintA - negativeFractionI");
		write(bigintA - negativeFractionI)
	};

	call soma();
	call mul();
	call div();
	call sub()
}
